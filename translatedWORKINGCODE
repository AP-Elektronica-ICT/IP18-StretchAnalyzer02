#include <Wire.h>
#include <math.h>
#include <SoftwareSerial.h>
SoftwareSerial BT(12, 11);

//BT TX D12
//BT RX D11

#define CTRL_REG1 0x20
#define CTRL_REG2 0x21
#define CTRL_REG3 0x22
#define CTRL_REG4 0x23
#define CTRL_REG5 0x24

int L3G4200D_Address = 105; //I2C address of the L3G4200D

const int analogInPin0 = A0;  // x
const int analogInPin1 = A1;  // y
const int analogInPin2 = A2;  // z


int sensorValue0 = 0;        // x
int sensorValue1 = 0;        // y
int sensorValue2 = 0;        // z

double  acceleration_x = 0;  //x-akselin acceleration m/s^2
double  acceleration_y = 0;  //x-akselin acceleration m/s^2
double  acceleration_z = 0;  //x-akselin acceleration m/s^2
double  previousacc_x = 0;
double  previousacc_z = 0;  //might not be necessary
double  previousMaximum = -99;
double  previousMinimum = 99;
double  localMaximum = -99;
double  localMinimum = 99;
double  previouslocalMaximum = -99;
double  previouslocalMinimum = 99;
double  Maximum = 0;
double  Minimum = 0;
double  BIGGESTangle = 0;
double  SMALLESTangle = 0;
double  BIGGEST = 0;
double  SMALLEST = 0;

char a;



unsigned long TIME = 0;

int x;
int y;
int z;
int STATE;
int previousSTATE = 0;
int UPLevel = 0;
int DOWNLevel = 0;



int getSTATE() //tarkistaa STATEn tai luo sen
{
  if (acceleration_x > 3)
  {
    STATE = 1;
    /*if (SMALLEST !=0)
      {
      Serial.print(TIME);
      Serial.print("\t");
      Serial.print(SMALLEST);
      Serial.println("");
      delay (10);
      }
      SMALLEST = 0;*/
    return STATE;  //, SMALLEST;
  }
  else if (acceleration_x < -3)
  {
    STATE = -1;
    /* if (BIGGEST != 0.00)
      {
      Serial.print(TIME);
       Serial.print("\t");
       Serial.print(acceleration_x);
       Serial.print("\t");
       Serial.print(SMALLEST);
       Serial.println("");
      }
      BIGGEST = 0;*/
    return STATE;  //, BIGGEST;
  }
  else
  {
    STATE = 0;
    return STATE;
  }
}

double getLevel() //is it DOWNLevel or UPLevel
{
  if (STATE == 1 && previousSTATE == 1)
  {
    UPLevel = 1;
    if (SMALLEST != 0.00)
    {
      Serial.print(TIME);
      Serial.print("\t");
      Serial.print(acceleration_x);
      Serial.print("\t");
      Serial.print(acceleration_z);
      Serial.print("\t");
      Serial.print("pienin:");
      Serial.print("\t");
      Serial.print(SMALLEST);
      Serial.println("");

      BT.print(TIME);
      BT.print("\t");
      BT.println(SMALLEST);
    }
    SMALLEST = 0;
    return UPLevel, SMALLEST;
  }

  else if (STATE == -1 && previousSTATE == -1)
  {
    DOWNLevel = 1;
    if (BIGGEST != 0.00)
    {
      Serial.print(TIME);
      Serial.print("\t");
      Serial.print(acceleration_x);
      Serial.print("\t");
      Serial.print(acceleration_z);
      Serial.print("\t");
      Serial.print("suurin:");
      Serial.print("\t");
      Serial.print(BIGGEST);
      Serial.println("");

      BT.print(TIME);
      BT.print("\t");
      BT.println(BIGGEST);
    }
    BIGGEST = 0;
    return DOWNLevel, BIGGEST;
  }

  else
  {
    UPLevel = 0;
    DOWNLevel = 0;
    return DOWNLevel, UPLevel;
  }
}

double  getMaximum()
{
  Maximum = acceleration_x;/*
  Serial.print(TIME);
  Serial.print("\t");
  Serial.print(Maximum);
  Serial.print("\t");
*/
  if (Maximum < 9.81)
  {
    previouslocalMinimum = localMinimum;
    localMinimum = acceleration_z;
    if (previousMaximum < Maximum)
    {
      double UPvariable;
      double UPangle;
      double UPfoo = max (-9.81, previouslocalMinimum);
      UPvariable = asin(UPfoo / 9.81) / 3.14 * 180;
         if (UPvariable != 90.05)
      {
      UPangle = UPvariable + 90;
     
      if (BIGGESTangle < UPangle) {   //tähän joku parempi ehto, idea olisi että angle olisi suurempi
        BIGGESTangle = UPangle;
      }
        if (BIGGEST < BIGGESTangle)
        {
          BIGGEST = BIGGESTangle;
        }
        //  Serial.print(TIME);
        //  Serial.print("\t");
        // Serial.print(BIGGESTangle);
        // Serial.print("\t");
        //  Serial.print(BIGGEST);
        // Serial.println("");
        UPvariable = 0;
        UPangle = 0;
      }
    }
  }
  return BIGGEST;
}

double   getMinimum()
{
  Minimum = acceleration_x;
  /*
    Serial.print(TIME);
    Serial.print("\t");
    Serial.print(Minimum);
    Serial.print("\t");*/

  if (Minimum > -9.81)
  {
    previouslocalMaximum = localMaximum;
    localMaximum = acceleration_z;
    if (previousMinimum > Minimum)
    {
      double DOWNvariable;
      double DOWNangle;
      double DOWNfoo = max(-9.81, previouslocalMaximum);
      // DOWNvariable = asin(min (-9.81, previouspMaximum)/9.81)/3.14*180;

      DOWNvariable = asin(DOWNfoo / 9.81) / 3.14 * 180;
   
        if (DOWNvariable != -90.05)
        {
      DOWNangle = DOWNvariable - 90;
      
      if (SMALLESTangle > DOWNangle) { //tähän joku parempi ehto, idea olisi että angle olisi pienempi
     
        SMALLESTangle = DOWNangle;
      }
     
        if (SMALLEST > SMALLESTangle)
        {
          SMALLEST = SMALLESTangle;
        }
        // Serial.print(TIME);
        // Serial.print("\t");
        //  Serial.print(SMALLESTangle);
        //  Serial.print("\t");
        //  Serial.print(SMALLEST);
        // Serial.println("");
        DOWNvariable = 0;
        DOWNangle = 0;
      }
    }

  }


  return SMALLEST;
}

void setup()
{

  Wire.begin();
  Serial.begin(115200);

  Serial.println("starting up L3G4200D");
  setupL3G4200D(2000); // Configure L3G4200  - 250, 500 or 2000 deg/sec

  //setup hc-06 bluetooth module
  pinMode(13, OUTPUT); // set digital pin to control as an output

  BT.begin(9600);   // set the data rate for the SoftwareSerial port

  BT.println("Hello from Arduino"); // Send test message to other device

  delay(1500); //wait for the sensor to be ready
}

void loop ()
{
  previousacc_x = acceleration_x;
  previousacc_z = acceleration_z;
  previousSTATE = STATE;
  previousMaximum = Maximum;
  previousMinimum = Minimum;
  sensorValue0 = analogRead(analogInPin0);
  sensorValue1 = analogRead(analogInPin1);
  sensorValue2 = analogRead(analogInPin2);
  //jannite = sensorValue/1023.0 * 5.0;
  TIME = millis();

  getGyroValues();




  acceleration_x = 0.1438 * sensorValue0 - 51.705;        //accelerations
  acceleration_x = constrain(acceleration_x, -9.81, 9.81);

  acceleration_y = 0.1344 * sensorValue1 - 48.285;
  acceleration_y = constrain(acceleration_y, -9.81, 9.81);

  acceleration_z = 0.1353 * sensorValue2 - 49.143;
  acceleration_z = constrain(acceleration_z, -9.81, 9.81);

  a = (BT.read());


   if (previousacc_x > acceleration_x + 1.5 || previousacc_x < acceleration_x - 1.5)  //check STATE
  {
  getSTATE();
    }
  getLevel();

  if (UPLevel == 1)
  {
    getMaximum();
  }

  if (DOWNLevel == 1)
  {
    getMinimum();
  }



/*
  Serial.print(TIME);
  Serial.print("\t");
  Serial.print(acceleration_x);
  Serial.print("\t");

  Serial.print(acceleration_y);
  Serial.print("\t");

  Serial.print(acceleration_z);
  Serial.print("\t");
  Serial.print(BIGGEST);
  Serial.print("\t");
  Serial.print(SMALLEST);
  Serial.print("\t");
  //Serial.print(x);
  //Serial.print("\t");
  Serial.print(y);
  //Serial.print("\t");
  //Serial.print(z);
  Serial.println("\t");
  /*Serial.print(acceleration_y);
    Serial.print("\t ");
    Serial.print(acceleration_z);
    Serial.print("\t ");
    Serial.print(STATE);
    Serial.print("\t ");
    Serial.print(UPLevel);
    Serial.print("\t ");
    Serial.print(DOWNLevel);
    Serial.println("\t ");*/
  delay (50);
  BIGGESTangle = 0;
  SMALLESTangle = 0;
}



void getGyroValues()
{

  byte xMSB = readRegister(L3G4200D_Address, 0x29);
  byte xLSB = readRegister(L3G4200D_Address, 0x28);
  x = ((xMSB << 8) | xLSB);

  byte yMSB = readRegister(L3G4200D_Address, 0x2B);
  byte yLSB = readRegister(L3G4200D_Address, 0x2A);
  y = ((yMSB << 8) | yLSB);

  byte zMSB = readRegister(L3G4200D_Address, 0x2D);
  byte zLSB = readRegister(L3G4200D_Address, 0x2C);
  z = ((zMSB << 8) | zLSB);
}

int setupL3G4200D(int scale) {
  //From  Jim Lindblom of Sparkfun's code

  // Enable x, y, z and turn off power down:
  writeRegister(L3G4200D_Address, CTRL_REG1, 0b00001111);

  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
  writeRegister(L3G4200D_Address, CTRL_REG2, 0b00000000);

  // Configure CTRL_REG3 to generate data ready interrupt on INT2
  // No interrupts used on INT1, if you'd like to configure INT1
  // or INT2 otherwise, consult the datasheet:
  writeRegister(L3G4200D_Address, CTRL_REG3, 0b00001000);

  // CTRL_REG4 controls the full-scale range, among other things:

  if (scale == 250) {
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00000000);
  } else if (scale == 500) {
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00010000);
  } else {
    writeRegister(L3G4200D_Address, CTRL_REG4, 0b00110000);
  }

  // CTRL_REG5 controls high-pass filtering of outputs, use it
  // if you'd like:
  writeRegister(L3G4200D_Address, CTRL_REG5, 0b00000000);
}

void writeRegister(int deviceAddress, byte address, byte val) {
  Wire.beginTransmission(deviceAddress); // start transmission to device
  Wire.write(address);       // send register address
  Wire.write(val);         // send value to write
  Wire.endTransmission();     // end transmission
}

int readRegister(int deviceAddress, byte address) {

  int v;
  Wire.beginTransmission(deviceAddress);
  Wire.write(address); // register to read
  Wire.endTransmission();

  Wire.requestFrom(deviceAddress, 1); // read a byte

  v = Wire.read();
  return v;
}
